#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ PATH
backend_path = Path(__file__).parent / "backend"
sys.path.append(str(backend_path))

def check_env_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤...")
    
    backend_env = Path("backend/.env")
    frontend_env = Path("frontend/.env")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend .env
    if not backend_env.exists():
        print("‚ùå backend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º backend .env
    with open(backend_env, 'r') as f:
        backend_content = f.read()
    
    required_vars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'USE_POSTGRES']
    missing_vars = []
    
    for var in required_vars:
        if var not in backend_content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –í backend/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É USE_POSTGRES
    if 'USE_POSTGRES=true' in backend_content:
        print("‚ö†Ô∏è USE_POSTGRES=true - –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ Supabase API...")
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ false
        new_content = backend_content.replace('USE_POSTGRES=true', 'USE_POSTGRES=false')
        with open(backend_env, 'w') as f:
            f.write(new_content)
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ USE_POSTGRES=false")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend .env
    if not frontend_env.exists():
        print("‚ùå frontend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º frontend .env
    with open(frontend_env, 'r') as f:
        frontend_content = f.read()
    
    if 'REACT_APP_BACKEND_URL' not in frontend_content:
        print("‚ùå –í frontend/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç REACT_APP_BACKEND_URL")
        return False
    
    print("‚úÖ .env —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import supabase
        print("‚úÖ supabase library —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print("‚ùå supabase library –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install supabase")
        return False
    
    try:
        import httpx
        print("‚úÖ httpx library —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print("‚ùå httpx library –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    
    return True

async def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        from supabase_client import supabase_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        courses = await supabase_client.get_records('courses', limit=1)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = ['courses', 'admin_users', 'team_members']
        for table in tables_to_check:
            try:
                count = await supabase_client.count_records(table)
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π {table}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

async def ensure_demo_data():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from supabase_client import supabase_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã
        courses = await supabase_client.get_records('courses', filters={'status': 'published'})
        if len(courses) < 3:
            print("‚ö†Ô∏è –ú–∞–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å init_demo_data.py
            import subprocess
            result = subprocess.run([sys.executable, 'backend/init_demo_data.py'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.stderr}")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(courses)} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        admin = await supabase_client.get_record('admin_users', 'email', 'admin@uroki-islama.ru')
        if admin:
            print("‚úÖ –ê–¥–º–∏–Ω admin@uroki-islama.ru –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def restart_services():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        import subprocess
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend
        result = subprocess.run(['sudo', 'supervisorctl', 'restart', 'backend'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Backend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º backend: {result.stderr}")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ frontend (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        result = subprocess.run(['sudo', 'supervisorctl', 'restart', 'frontend'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Frontend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º frontend: {result.stderr}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        return False

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    try:
        import requests
        import time
        
        # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(3)
        
        # –ß–∏—Ç–∞–µ–º backend URL –∏–∑ frontend .env
        frontend_env = Path("frontend/.env")
        if frontend_env.exists():
            with open(frontend_env, 'r') as f:
                content = f.read()
                for line in content.split('\n'):
                    if line.startswith('REACT_APP_BACKEND_URL='):
                        backend_url = line.split('=')[1].strip()
                        break
        else:
            backend_url = "http://localhost:8001"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints = [
            '/api/',
            '/api/courses',
            '/api/team'
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{backend_url}{endpoint}", timeout=10)
                if response.status_code == 200:
                    print(f"‚úÖ {endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª {response.status_code}")
            except Exception as e:
                print(f"‚ùå {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    try:
        backup_dir = Path("supabase_backup")
        backup_dir.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        import shutil
        
        files_to_backup = [
            "backend/.env",
            "frontend/.env",
            "backend/supabase_client.py",
            "backend/models.py"
        ]
        
        for file_path in files_to_backup:
            src = Path(file_path)
            if src.exists():
                dst = backup_dir / src.name
                shutil.copy2(src, dst)
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        import tarfile
        with tarfile.open(f"supabase_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tar.gz", "w:gz") as tar:
            tar.add(backup_dir, arcname="supabase_backup")
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    print("=" * 60)
    
    all_ok = True
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
    if not check_env_files():
        all_ok = False
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        all_ok = False
    
    # 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if not all_ok:
        restart_services()
        # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        await asyncio.sleep(5)
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not await test_supabase_connection():
        all_ok = False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    if not await ensure_demo_data():
        all_ok = False
    
    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    if not await test_api_endpoints():
        all_ok = False
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    create_backup()
    
    print("=" * 60)
    if all_ok:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üåê –í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ")
        print("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–µ SUPABASE_SETUP_GUIDE.md")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    
    print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞:")
    print("SUPABASE_URL=https://kykzqxoxgcwqurnceslu.supabase.co")
    print("SUPABASE_ANON_KEY=<–∫–ª—é—á –∏–∑ backend/.env>")
    print("USE_POSTGRES=false")

if __name__ == "__main__":
    asyncio.run(main())